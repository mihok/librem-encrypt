#!/bin/bash

build() {
    local mod

    add_module "dm-crypt"
    add_module "dm-integrity"
    if [[ $CRYPTO_MODULES ]]; then
        for mod in $CRYPTO_MODULES; do
            add_module "$mod"
        done
    else
        add_all_modules '/crypto/'
    fi

    if [ -d "${BUILDROOT}/etc/initcpio/gpg" ]; then
        echo "WARNING! /etc/initcpio/gpg exists in initramfs buildroot, deleting." > 2
        rm -rf "${BUILDROOT}/etc/initcpio/gpg"
    fi

    add_binary "cryptsetup"
    add_binary "dmsetup"
    add_binary "gpg"
    add_binary "gpg-agent"
    add_binary "pinentry-tty"
    add_binary "pcscd"
    add_binary "/usr/lib/gnupg/scdaemon"
    add_binary "shred"
    add_file "/usr/lib/udev/rules.d/10-dm.rules"
    add_file "/usr/lib/udev/rules.d/13-dm-disk.rules"
    add_file "/usr/lib/udev/rules.d/95-dm-notify.rules"
    add_file "/usr/lib/initcpio/udev/11-dm-initramfs.rules" "/usr/lib/udev/rules.d/11-dm-initramfs.rules"

    # cryptsetup calls pthread_create(), which dlopen()s libgcc_s.so.1
    add_binary "/usr/lib/libgcc_s.so.1"

    # add our gpg config
    mkdir -p "${BUILDROOT}/etc/initcpio/gpg"
    chmod 0700 "${BUILDROOT}/etc/initcpio/gpg"
    echo "pinentry-program /usr/bin/pinentry-tty" > "${BUILDROOT}/etc/initcpio/gpg/gpg-agent.conf"

    # include the gpg public key from the card
    curl $(gpg --card-status | grep URL | cut -d ':' -f 2,3) > "${BUILDROOT}/etc/initcpio/gpg/pubkey.gpg"

    add_full_dir "${BUILDROOT}/etc/initcpio/gpg"
    
    add_runscript
}

help() {
    cat <<HELPEOF
This hook allows for full encrypted device to be unlocked with a OpenPGP smart
card. Users should specify the device to be unlocked using
'cryptdevice=device:dmname' on the kernel command line, where 'device' is the
path to the raw device, and 'dmname' is the name given to
the device after unlocking, and will be available as /dev/mapper/dmname.

This hook assumes a keyfile, 'cryptkey=device:fstype:path' should be specified
on the kernel cmdline, where 'device' represents the raw block device where the
key exists, 'fstype' is the filesystem type of 'device' (or auto), and 'path'
is the absolute path of the keyfile within the device.
HELPEOF
}
